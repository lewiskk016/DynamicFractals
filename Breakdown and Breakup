#property strict

//+------------------------------------------------------------------+
//| Custom Breakdown and Breakout Indicator                         |
//|                                                                  |
//| This indicator identifies breakdown and breakout points based on custom logic.  |
//+------------------------------------------------------------------+

// Parameters
input int lookbackBars = 10; // Number of bars to look back for identifying origin points

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
   IndicatorBuffers(2);
   SetIndexBuffer(0, BreakdownBuffer);
   SetIndexBuffer(1, BreakoutBuffer);

   SetIndexStyle(0, DRAW_ARROW);
   SetIndexArrow(0, 233); // Down arrow for breakdown
   SetIndexStyle(1, DRAW_ARROW);
   SetIndexArrow(1, 234); // Up arrow for breakout

   ArraySetAsSeries(BreakdownBuffer, true);
   ArraySetAsSeries(BreakoutBuffer, true);

   return(INIT_SUCCEEDED);
  }

  //+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
   int limit = rates_total - prev_calculated;

   for(int i = limit - 1; i >= 0; i--)
     {
      double currentHigh = high[i];
      double currentLow = low[i];

      // Calculate breakdown origin point
      bool isBreakdown = false;
      for(int j = 1; j <= lookbackBars; j++)
        {
         if (currentLow < low[i + j])
           {
            isBreakdown = true;
            break;
           }
        }
