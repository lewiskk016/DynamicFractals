#property strict

//+------------------------------------------------------------------+
//| Custom Highs and Lows Indicator                                  |
//|                                                                  |
//| This indicator identifies highs and lows based on custom logic.  |
//+------------------------------------------------------------------+


// Parameters
input int lookbackBars = 10; // Number of bars to look back for highs and lows

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
   IndicatorBuffers(2);
   SetIndexBuffer(0, HighsBuffer);
   SetIndexBuffer(1, LowsBuffer);

   SetIndexStyle(0, DRAW_ARROW);
   SetIndexArrow(0, 233); // Up arrow
   SetIndexStyle(1, DRAW_ARROW);
   SetIndexArrow(1, 234); // Down arrow

   ArraySetAsSeries(HighsBuffer, true);
   ArraySetAsSeries(LowsBuffer, true);

   return(INIT_SUCCEEDED);
  }


//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {

     int limit = rates_total - prev_calculated;

   for(int i = limit - 1; i >= 0; i--)
     {
      double currentHigh = high[i];
      double currentLow = low[i];

      // Check if it's a high
      bool isHigh = true;
      for(int j = 1; j <= lookbackBars; j++)
        {
         if (currentHigh < high[i + j])
           {
            isHigh = false;
            break;
           }
        }

 // Check if it's a low
      bool isLow = true;
      for(int j = 1; j <= lookbackBars; j++)
        {
         if (currentLow > low[i + j])
           {
            isLow = false;
            break;
           }
        }

      // Set arrow for high
      if (isHigh)
         HighsBuffer[i] = currentHigh;
      else
         HighsBuffer[i] = 0;

      // Set arrow for low
      if (isLow)
         LowsBuffer[i] = currentLow;
      else
         LowsBuffer[i] = 0;
     }

   return(rates_total);
  }
//+------------------------------------------------------------------+

// Define buffers
double HighsBuffer[];
double LowsBuffer[];


